---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Deploys the mux video monitor"

Parameters:
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AppDomain:
    Type: String
  # BackendLambdaS3Bucket:
  #   Type: String
  # BackendLambdaS3Key:
  #   Type: String

Resources:
  AppCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "${AppDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${AppDomain}"
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: "DNS"

  FrontendWebsite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${AppDomain}'
  
  FrontendWebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "FrontendWebsite"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Principal:
            CanonicalUser: !GetAtt FrontendAccessIdentity.S3CanonicalUserId
          Action:
          - "s3:GetObject"
          Resource:
          - !Sub "arn:aws:s3:::${FrontendWebsite}/*"
          Effect: "Allow"
       
  FrontendDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref AppDomain
        CacheBehaviors:
        - AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
          Compress: true
          PathPattern: "*.html"
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        # - AllowedMethods:
        #   - "GET"
        #   - "HEAD"
        #   - "POST"
        #   - "OPTIONS"
        #   - "DELETE"
        #   - "PUT"
        #   - "PATCH"
        #   CachedMethods:
        #   - "GET"
        #   - "HEAD"
        #   CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
        #   Compress: true
        #   PathPattern: "/api/*"
        #   TargetOriginId: !Sub "${AWS::StackName}-BackendOrigin"
        #   ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # "Managed-CachingOptimized"
          Compress: true
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Origins:
          - DomainName: !Sub "${FrontendWebsite}.s3.amazonaws.com"
            Id: !Sub "${AWS::StackName}-FrontendOrigin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${FrontendAccessIdentity}"

        # - CustomOriginConfig:
        #     OriginProtocolPolicy: "http-only"
        #   DomainName: !Sub "${FrontendWebsite}.s3-website-${AWS::Region}.amazonaws.com"
        #   Id: !Sub "${AWS::StackName}-FrontendOrigin"
        # - CustomOriginConfig:
        #     OriginProtocolPolicy: "https-only"
        #   DomainName: !Sub ${BackendAPI}.execute-api.${AWS::Region}.amazonaws.com
        #   Id: !Sub "${AWS::StackName}-BackendOrigin"
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref "AppCertificate"
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  AppDomainDNSv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "A"

  AppDomainDNSv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "AAAA"

Outputs:
  # FrontendURL:
  #   Value: !GetAtt "FrontendDistribution.DomainName"
  FrontendWebsiteBucket:
    Value: !Ref "FrontendWebsite"
